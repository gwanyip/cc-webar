{"version":3,"file":"TextureUtils.js","sourceRoot":"","sources":["../../src/three-components/TextureUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {BackSide, BoxBufferGeometry, Cache, CubeCamera, DataTextureLoader, EventDispatcher, GammaEncoding, LinearFilter, LinearMipMapLinearFilter, Mesh, NearestFilter, RawShaderMaterial, RGBEEncoding, Scene, Texture, TextureEncoding, TextureLoader, WebGLRenderer, WebGLRenderTarget, WebGLRenderTargetCube} from 'three';\nimport {LinearEncoding} from 'three';\nimport {UnsignedByteType} from 'three';\nimport {RGBFormat} from 'three';\n\nimport {CubemapGenerator} from '../third_party/three/EquirectangularToCubeGenerator.js';\nimport {RGBELoader} from '../third_party/three/RGBELoader.js';\nimport {ProgressTracker} from '../utilities/progress-tracker.js';\n\nimport EnvironmentMapGenerator from './EnvironmentMapGenerator.js';\nimport {generatePMREM} from './PMREMGenerator.js';\nimport {encodings, texelIO} from './shader-chunk/common.glsl.js';\n\nexport interface EnvironmentMapAndSkybox {\n  environmentMap: WebGLRenderTarget;\n  skybox: WebGLRenderTarget|null;\n}\n\nexport interface EnvironmentGenerationConfig {\n  progressTracker?: ProgressTracker;\n}\n\n// Enable three's loader cache so we don't create redundant\n// Image objects to decode images fetched over the network.\nCache.enabled = true;\n\nconst HDR_FILE_RE = /\\.hdr$/;\nconst ldrLoader = new TextureLoader();\nconst hdrLoader = new RGBELoader();\nconst CUBEMAP_SIZE = 256;\nconst GENERATED_BLUR = 0.04;\n\nconst $environmentMapCache = Symbol('environmentMapCache');\nconst $generatedEnvironmentMap = Symbol('generatedEnvironmentMap');\n\nconst $loadEnvironmentMapFromUrl = Symbol('loadEnvironmentMapFromUrl');\nconst $loadGeneratedEnvironmentMap = Symbol('loadGeneratedEnvironmentMap');\n\n// Attach a `userData` object for arbitrary data on textures that\n// originate from TextureUtils, similar to Object3D's userData,\n// for help debugging, providing metadata for tests, and semantically\n// describe the type of texture within the context of this application.\nconst userData = {\n  url: null,\n  // 'Equirectangular', 'Cube', 'PMREM'\n  mapping: null,\n};\n\nexport default class TextureUtils extends EventDispatcher {\n  private renderer: WebGLRenderer;\n\n  private[$generatedEnvironmentMap]: WebGLRenderTarget|null = null;\n\n  private[$environmentMapCache] = new Map<string, Promise<WebGLRenderTarget>>();\n\n  constructor(renderer: WebGLRenderer) {\n    super();\n    this.renderer = renderer;\n  }\n\n  equirectangularToCubemap(texture: Texture): WebGLRenderTargetCube {\n    const generator = new CubemapGenerator(this.renderer);\n\n    let target = generator.fromEquirectangular(texture, {\n      resolution: CUBEMAP_SIZE,\n    });\n\n    (target.texture as any).userData = {\n      ...userData,\n      ...({\n        url: (texture as any).userData ? (texture as any).userData.url : null,\n        mapping: 'Cube',\n      })\n    };\n\n    return target;\n  }\n\n  async load(\n      url: string, progressCallback: (progress: number) => void = () => {}):\n      Promise<Texture> {\n    try {\n      const isHDR: boolean = HDR_FILE_RE.test(url);\n      const loader: DataTextureLoader = isHDR ? hdrLoader : ldrLoader;\n      const texture: Texture = await new Promise<Texture>(\n          (resolve, reject) => loader.load(\n              url, resolve, (event: {loaded: number, total: number}) => {\n                progressCallback(event.loaded / event.total * 0.9);\n              }, reject));\n\n      progressCallback(1.0);\n\n      (texture as any).userData = {\n        ...userData,\n        ...({\n          url: url,\n          mapping: 'Equirectangular',\n        })\n      };\n\n      if (isHDR) {\n        texture.encoding = RGBEEncoding;\n        texture.minFilter = NearestFilter;\n        texture.magFilter = NearestFilter;\n        texture.flipY = true;\n      } else {\n        texture.encoding = GammaEncoding;\n      }\n\n      return texture;\n\n    } finally {\n      if (progressCallback) {\n        progressCallback(1);\n      }\n    }\n  }\n\n  async loadEquirectAsCubeMap(\n      url: string, progressCallback: (progress: number) => void = () => {}):\n      Promise<WebGLRenderTargetCube> {\n    let equirect = null;\n\n    try {\n      equirect = await this.load(url, progressCallback);\n      return await this.equirectangularToCubemap(equirect);\n    } finally {\n      if (equirect != null) {\n        (equirect as any).dispose();\n      }\n    }\n  }\n\n  /**\n   * Returns a { skybox, environmentMap } object with the targets/textures\n   * accordingly. `skybox` is a WebGLRenderCubeTarget, and `environmentMap`\n   * is a Texture from a WebGLRenderCubeTarget.\n   */\n  async generateEnvironmentMapAndSkybox(\n      skyboxUrl: string|null = null, environmentMapUrl: string|null = null,\n      options: EnvironmentGenerationConfig = {}):\n      Promise<EnvironmentMapAndSkybox> {\n    const {progressTracker} = options;\n    const updateGenerationProgress =\n        progressTracker != null ? progressTracker.beginActivity() : () => {};\n\n    try {\n      let skyboxLoads: Promise<WebGLRenderTarget|null> = Promise.resolve(null);\n      let environmentMapLoads: Promise<WebGLRenderTarget>;\n\n      // If we have a skybox URL, attempt to load it as a cubemap\n      if (!!skyboxUrl) {\n        skyboxLoads =\n            this[$loadEnvironmentMapFromUrl](skyboxUrl, progressTracker);\n      }\n\n      if (!!environmentMapUrl) {\n        // We have an available environment map URL\n        environmentMapLoads = this[$loadEnvironmentMapFromUrl](\n            environmentMapUrl, progressTracker);\n      } else if (!!skyboxUrl) {\n        // Fallback to deriving the environment map from an available skybox\n        environmentMapLoads = skyboxLoads as Promise<WebGLRenderTarget>;\n      } else {\n        // Fallback to generating the environment map\n        environmentMapLoads = this[$loadGeneratedEnvironmentMap]();\n      }\n\n      let [environmentMap, skybox] =\n          await Promise.all([environmentMapLoads, skyboxLoads]);\n\n      return {environmentMap, skybox};\n    } finally {\n      updateGenerationProgress(1.0);\n    }\n  }\n\n  /**\n   * Loads a WebGLRenderTarget from a given URL. The render target in this\n   * case will be assumed to be used as an environment map.\n   */\n  private[$loadEnvironmentMapFromUrl](\n      url: string,\n      progressTracker?: ProgressTracker): Promise<WebGLRenderTarget> {\n    if (!this[$environmentMapCache].has(url)) {\n      const progressCallback =\n          progressTracker ? progressTracker.beginActivity() : () => {};\n      const environmentMapLoads =\n          this.loadEquirectAsCubeMap(url, progressCallback)\n              .then(interstitialEnvironmentMap => {\n                const environmentMap =\n                    this.pmremPass(interstitialEnvironmentMap);\n                // In this case, we don't care about the interstitial\n                // environment map because it will never be used for anything,\n                // so dispose of it right away:\n                interstitialEnvironmentMap.dispose();\n                return environmentMap;\n              });\n\n      this[$environmentMapCache].set(url, environmentMapLoads);\n    }\n\n    return this[$environmentMapCache].get(url)!;\n  }\n\n  /**\n   * Loads a dynamically generated environment map.\n   */\n  private[$loadGeneratedEnvironmentMap](): Promise<WebGLRenderTarget> {\n    if (this[$generatedEnvironmentMap] == null) {\n      const environmentMapGenerator =\n          new EnvironmentMapGenerator(this.renderer);\n      const interstitialEnvironmentMap = environmentMapGenerator.generate();\n\n      const blurredEnvironmentMap =\n          this.gaussianBlur(interstitialEnvironmentMap, GENERATED_BLUR);\n\n      this[$generatedEnvironmentMap] = this.pmremPass(blurredEnvironmentMap);\n\n      // We should only ever generate this map once, and we will not be using\n      // the environment map as a skybox, so go ahead and dispose of all\n      // interstitial artifacts:\n      interstitialEnvironmentMap.dispose();\n      blurredEnvironmentMap.dispose();\n      environmentMapGenerator.dispose();\n    }\n\n    return Promise.resolve(this[$generatedEnvironmentMap]!);\n  }\n\n  gaussianBlur(\n      cubeTarget: WebGLRenderTargetCube, standardDeviationRadians: number,\n      outputEncoding?: TextureEncoding): WebGLRenderTargetCube {\n    const blurScene = new Scene();\n\n    const geometry = new BoxBufferGeometry();\n    geometry.removeAttribute('uv');\n\n    const cubeResolution = cubeTarget.width;\n    const standardDeviations = 3;\n    const n = Math.ceil(\n        standardDeviations * standardDeviationRadians * cubeResolution * 4 /\n        Math.PI);\n    const inverseIntegral =\n        standardDeviations / ((n - 1) * Math.sqrt(2 * Math.PI));\n    let weights = [];\n    for (let i = 0; i < n; ++i) {\n      const x = standardDeviations * i / (n - 1);\n      weights.push(inverseIntegral * Math.exp(-x * x / 2));\n    }\n\n    const blurMaterial = new RawShaderMaterial({\n      defines: {n: n},\n      uniforms: {\n        tCube: {value: null},\n        latitudinal: {value: false},\n        weights: {value: weights},\n        dTheta:\n            {value: standardDeviationRadians * standardDeviations / (n - 1)},\n        inputEncoding: {value: encodings[LinearEncoding]},\n        outputEncoding: {value: encodings[LinearEncoding]}\n      },\n      vertexShader: `\nprecision mediump float;\nprecision mediump int;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nattribute vec3 position;\nvarying vec3 vPosition;\nvoid main() {\n    vPosition = position;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n      `,\n      fragmentShader: `\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vPosition;\nuniform float weights[n];\nuniform samplerCube tCube;\nuniform bool latitudinal;\nuniform float dTheta;\n${texelIO}\nvoid main() {\n  vec4 texColor = vec4(0.0);\n  for (int i = 0; i < n; i++) {\n    for (int dir = -1; dir < 2; dir += 2) {\n      if (i == 0 && dir == 1)\n        continue;\n      vec3 sampleDirection = vPosition;\n      float xz = length(sampleDirection.xz);\n      float weight = weights[i];\n      if (latitudinal) {\n        float diTheta = dTheta * float(dir * i) / xz;\n        mat2 R = mat2(cos(diTheta), sin(diTheta), -sin(diTheta), cos(diTheta));\n        sampleDirection.xz = R * sampleDirection.xz;\n        texColor += weight * inputTexelToLinear(textureCube(tCube, sampleDirection));\n      } else {\n        float diTheta = dTheta * float(dir * i);\n        mat2 R = mat2(cos(diTheta), sin(diTheta), -sin(diTheta), cos(diTheta));\n        vec2 xzY = R * vec2(xz, sampleDirection.y);\n        sampleDirection.xz *= xzY.x / xz;\n        sampleDirection.y = xzY.y;\n        texColor += weight * inputTexelToLinear(textureCube(tCube, sampleDirection));\n      }\n    }\n  }\n  gl_FragColor = texColor;\n  gl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n      `,\n      side: BackSide,\n      depthTest: false,\n      depthWrite: false\n    });\n\n    blurScene.add(new Mesh(geometry, blurMaterial));\n    const blurUniforms = blurMaterial.uniforms;\n\n    const cubeTexture = cubeTarget.texture;\n    let blurTargetOptions = {\n      type: cubeTexture.type,\n      format: cubeTexture.format,\n      encoding: cubeTexture.encoding,\n      generateMipmaps: cubeTexture.generateMipmaps,\n      minFilter: cubeTexture.minFilter,\n      magFilter: cubeTexture.magFilter\n    };\n\n    // Three.js bug: CubeCamera.d.ts constructor is not up to date with\n    // CubeCamera.js\n    let blurCamera =\n        new (CubeCamera as any)(0.1, 100, cubeResolution, blurTargetOptions);\n    const tempTexture = blurCamera.renderTarget.texture;\n\n    blurUniforms.latitudinal.value = false;\n    blurUniforms.tCube.value = cubeTexture;\n    blurUniforms.inputEncoding.value = encodings[cubeTexture.encoding];\n    blurUniforms.outputEncoding.value = encodings[tempTexture.encoding];\n    blurCamera.update(this.renderer, blurScene);\n\n    if (outputEncoding === GammaEncoding &&\n        cubeTexture.encoding !== GammaEncoding) {\n      blurTargetOptions = {\n        type: UnsignedByteType,\n        format: RGBFormat,\n        encoding: outputEncoding,\n        generateMipmaps: true,\n        minFilter: LinearMipMapLinearFilter,\n        magFilter: LinearFilter\n      };\n    }\n    const outputCamera =\n        new (CubeCamera as any)(0.1, 100, cubeResolution, blurTargetOptions);\n    const outputTarget = outputCamera.renderTarget;\n    (outputTarget.texture as any).userData = {\n      ...userData,\n      ...({\n        url: (cubeTexture as any).userData ? (cubeTexture as any).userData.url :\n                                             null,\n        mapping: 'Cube',\n      })\n    };\n\n    blurUniforms.latitudinal.value = true;\n    blurUniforms.tCube.value = tempTexture;\n    blurUniforms.inputEncoding.value = encodings[tempTexture.encoding];\n    blurUniforms.outputEncoding.value =\n        encodings[outputTarget.texture.encoding];\n    outputCamera.update(this.renderer, blurScene);\n\n    tempTexture.dispose();\n    return outputTarget;\n  }\n\n  /**\n   * Takes a cube-ish (@see equirectangularToCubemap) texture and\n   * returns a texture of the prefiltered mipmapped radiance environment map\n   * to be used as environment maps in models.\n   */\n  pmremPass(target: WebGLRenderTargetCube): WebGLRenderTarget {\n    const cubeUVTarget = generatePMREM(target, this.renderer);\n\n    (cubeUVTarget.texture as any).userData = {\n      ...userData,\n      ...({\n        url: (target.texture as any).userData ?\n            (target.texture as any).userData.url :\n            null,\n        mapping: 'PMREM',\n      })\n    };\n\n    return cubeUVTarget;\n  }\n\n  async dispose() {\n    const allTargetsLoad: Array<Promise<WebGLRenderTarget>> = [];\n\n    // NOTE(cdata): We would use for-of iteration on the maps here, but\n    // IE11 doesn't have the necessary iterator-returning methods. So,\n    // disposal of these render targets is kind of convoluted as a result.\n\n    this[$environmentMapCache].forEach((targetLoads) => {\n      allTargetsLoad.push(targetLoads);\n    });\n\n    this[$environmentMapCache].clear();\n\n    for (const targetLoads of allTargetsLoad) {\n      try {\n        const target = await targetLoads;\n        target.dispose();\n      } catch (e) {\n        // Suppress errors, so that all render targets will be disposed\n      }\n    }\n\n    if (this[$generatedEnvironmentMap] != null) {\n      this[$generatedEnvironmentMap]!.dispose();\n      this[$generatedEnvironmentMap] = null;\n    }\n  }\n}\n"]}