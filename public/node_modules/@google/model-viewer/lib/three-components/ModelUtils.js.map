{"version":3,"file":"ModelUtils.js","sourceRoot":"","sources":["../../src/three-components/ModelUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {Bone, Camera, Material, Object3D, Scene, Shader, Skeleton, SkinnedMesh} from 'three';\n\nimport {cubeUVChunk} from './shader-chunk/cube_uv_reflection_fragment.glsl.js';\nimport {envmapChunk} from './shader-chunk/envmap_physical_pars_fragment.glsl.js';\nimport {lightsChunk} from './shader-chunk/lights_fragment_maps.glsl.js';\nimport {normalmapChunk} from './shader-chunk/normalmap_pars_fragment.glsl.js';\n\n// NOTE(cdata): What follows is a TypeScript-ified version of:\n// https://gist.github.com/cdata/f2d7a6ccdec071839bc1954c32595e87\n\nexport interface Gltf {\n  animations: Array<any>;\n  scene: Scene|null;\n  scenes: Array<Scene>;\n  cameras: Array<Camera>;\n  asset: any;\n  parser: any;\n  userData: any;\n}\n\ntype SkinnedMeshMap = {\n  [index: string]: SkinnedMesh\n};\n\ntype BoneMap = {\n  [index: string]: Bone\n};\n\n/**\n * This is a patch to Three.js' handling of PMREM environments. This patch\n * has to be applied after cloning because Three.js does not seem to clone\n * the onBeforeCompile method.\n */\nconst updateShader = (shader: Shader) => {\n  shader.fragmentShader =\n      shader.fragmentShader\n          .replace('#include <cube_uv_reflection_fragment>', cubeUVChunk)\n          .replace('#include <envmap_physical_pars_fragment>', envmapChunk)\n          .replace('#include <lights_fragment_maps>', lightsChunk)\n          .replace('#include <normalmap_pars_fragment>', normalmapChunk);\n};\n\n/**\n * Creates a clone of the given material, and applies a patch to the\n * shader program.\n */\nconst cloneAndPatchMaterial = (material: Material): Material => {\n  const clone = material.clone();\n  clone.onBeforeCompile = updateShader;\n  return clone;\n};\n\n/**\n * Fully clones a parsed GLTF, including correct cloning of any SkinnedMesh\n * objects.\n *\n * NOTE(cdata): This is necessary due to limitations of the Three.js clone\n * routine on scenes. Without it, models with skeletal animations will not be\n * cloned properly.\n *\n * @see https://github.com/mrdoob/three.js/issues/5878\n */\nexport const cloneGltf = (gltf: Gltf): Gltf => {\n  const hasScene = gltf.scene != null;\n  const clone:\n      Gltf = {...gltf, scene: hasScene ? gltf.scene!.clone(true) : null};\n\n  const skinnedMeshes: SkinnedMeshMap = {};\n  let hasSkinnedMeshes = false;\n\n  if (hasScene) {\n    gltf.scene!.traverse((node: any) => {\n      if (node.isSkinnedMesh) {\n        hasSkinnedMeshes = true;\n        skinnedMeshes[node.name] = node as SkinnedMesh;\n      }\n    });\n  }\n\n  const cloneBones: BoneMap = {};\n  const cloneSkinnedMeshes: SkinnedMeshMap = {};\n\n  if (hasScene) {\n    clone.scene!.traverse((node: any) => {\n      // Set a high renderOrder while we're here to ensure the model\n      // always renders on top of the skysphere\n      node.renderOrder = 1000;\n\n      // Materials aren't cloned when cloning meshes; geometry\n      // and materials are copied by reference. This is necessary\n      // for the same model to be used twice with different\n      // environment maps.\n      if (Array.isArray(node.material)) {\n        node.material = node.material.map(cloneAndPatchMaterial);\n      } else if (node.material != null) {\n        node.material = cloneAndPatchMaterial(node.material);\n      }\n\n      if (hasSkinnedMeshes) {\n        if (node.isBone) {\n          cloneBones[node.name] = node as Bone;\n        }\n\n        if (node.isSkinnedMesh) {\n          cloneSkinnedMeshes[node.name] = node as SkinnedMesh;\n        }\n      }\n    });\n  }\n\n  for (let name in skinnedMeshes) {\n    const skinnedMesh = skinnedMeshes[name];\n    const skeleton = skinnedMesh.skeleton;\n    const cloneSkinnedMesh = cloneSkinnedMeshes[name];\n\n    const orderedCloneBones: Array<Bone> = [];\n\n    for (let i = 0; i < skeleton.bones.length; ++i) {\n      const cloneBone = cloneBones[skeleton.bones[i].name];\n      orderedCloneBones.push(cloneBone);\n    }\n\n    cloneSkinnedMesh.bind(\n        new Skeleton(orderedCloneBones, skeleton.boneInverses),\n        cloneSkinnedMesh.matrixWorld);\n  }\n\n  return clone;\n};\n\n/**\n * Moves Three.js objects from one parent to another\n */\nexport const moveChildren = (from: Object3D, to: Object3D) => {\n  while (from.children.length) {\n    to.add(from.children.shift()!);\n  }\n};"]}